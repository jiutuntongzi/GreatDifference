//
//  AppDelegate.m
//  GreatDifference
//
//  Created by xiaodou_yxg on 16/10/29.
//  Copyright © 2016年 xiaodou. All rights reserved.
//

#import "AppDelegate.h"
#import "LoginViewController.h"
#import "XGNavigationViewController.h"
#import "MainViewController.h"
#import <BaiduMapAPI_Map/BMKMapComponent.h>
#import "WXApi.h"
#import "WXApiManager.h"
#import <ShareSDK/ShareSDK.h>
#import <ShareSDKConnector/ShareSDKConnector.h>
#import "NewFeatureViewController.h"

//腾讯开放平台（对应QQ和QQ空间）SDK头文件
#import <TencentOpenAPI/TencentOAuth.h>
#import <TencentOpenAPI/QQApiInterface.h>
//新浪微博SDK头文件
#import "WeiboSDK.h"

#import <AlipaySDK/AlipaySDK.h>

BMKMapManager* _mapManager;

@interface AppDelegate ()<UIAlertViewDelegate>
@property (nonatomic, copy) NSString  *updateUrl;

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.

    _window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];
    _window.backgroundColor = [UIColor whiteColor];
    // 要使用百度地图，请先启动BaiduMapManager
    _mapManager = [[BMKMapManager alloc]init];
    BOOL ret = [_mapManager start:@"NnScWFxau6idbprnsPdk9nf3ZaBNoYyZ" generalDelegate:self];
    if (!ret) {
        NSLog(@"manager start failed!");
    }

    [self updateApp];

    // 应该存储当前的版本号 来判断是否需要更新
    NSString *lastVersion = [MyUserDefaults objectForKey:CURRENT_VERSION];
    NSString *currentVersion = [[[NSBundle mainBundle]infoDictionary] objectForKey:CURRENT_VERSION];
    if ([lastVersion isEqualToString:currentVersion]) {
        
        UIViewController *rootVc;
        BOOL loginState = [MyUserDefaults boolForKey:LoginState];
        if (!loginState) {
            LoginViewController *loginVc = [[LoginViewController alloc]init];
            rootVc = [[XGNavigationViewController alloc]initWithRootViewController:loginVc];
            
        }else{
            rootVc = [[MainViewController alloc]init];
        }
        
        _window.rootViewController = rootVc;

    }else{
        self.window.rootViewController = [NewFeatureViewController new];
        [MyUserDefaults setObject:currentVersion forKey:CURRENT_VERSION];
        [MyUserDefaults synchronize];
    }
    //应用中本地图片缓存清除处理
//    [[SDImageCache sharedImageCache] clearMemory];
//    [[SDImageCache sharedImageCache] cleanDisk]
    

    [_window makeKeyAndVisible];

//    [WXApi registerApp:@"wx0dbf3f21fe7c9a5b" withDescription:@"xiaodouedu"];
    [self setShareSDK];
    return YES;
}

- (void)onGetNetworkState:(int)iError
{
    if (0 == iError) {
        NSLog(@"联网成功");
    }
    else{
        NSLog(@"onGetNetworkState %d",iError);
    }
    
}

- (void)onGetPermissionState:(int)iError
{
    if (0 == iError) {
        NSLog(@"授权成功");
    }
    else {
        NSLog(@"onGetPermissionState %d",iError);
    }
}

- (BOOL)updateApp{
    
    NSError *error;
    //kAPP_URL : http://itunes.apple.com/lookup?id=
    //kAppId : 在iTunes connect上申请的APP ID
    NSString *urlStr = [NSString stringWithFormat:@"%@%@", kApp_URL, kAppId];
    NSURL *url = [NSURL URLWithString:urlStr];
    
    NSURLRequest *request = [NSURLRequest requestWithURL:url];
    NSData *response = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:&error];
    
    if (!response) {
        return NO;
    }
    NSError *dicError;
    NSDictionary *appInfoDict = [NSJSONSerialization JSONObjectWithData:response options:NSJSONReadingMutableLeaves error:&dicError];
    
    if (error) {
        NSLog(@"%@", error.description);
        return NO;
    }
    NSArray *resultArray = [appInfoDict objectForKey:@"results"];
    if (!resultArray.count) {
        return NO;
    }
    NSDictionary *updateDict = [resultArray objectAtIndex:0];
    //获取服务器上应用的最新版本号 此判断 第一位数 不能大于9
    NSString  *updateVersion = updateDict[@"version"];
    NSRange range;
    range.location = 1;
    range.length = 1;
    float update = [[updateVersion stringByReplacingCharactersInRange:range withString:@""] floatValue];
    
    NSString * trackViewUrl = updateDict[@"trackViewUrl"];
    NSDictionary *infoDic = [[NSBundle mainBundle]infoDictionary];
    NSString *currentVersion = [infoDic objectForKey:@"CFBundleShortVersionString"];
    float current = [[currentVersion stringByReplacingCharactersInRange:range withString:@""] floatValue];
    
    if (current<update) {
    
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"检查更新" message:@"发现最新版本是否更新" delegate:self cancelButtonTitle:@"否" otherButtonTitles:@"是", nil];
        alertView.delegate = self;
        self.updateUrl = trackViewUrl;
        [alertView show];
//        [[NSUserDefaults standardUserDefaults] setObject:BASE_URL forKey:CURRENT_BASE_URL];
//        [[NSUserDefaults standardUserDefaults] synchronize];
//        return YES;
//        
    }
    return NO;
}


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (buttonIndex == 1) {
        [[UIApplication sharedApplication]openURL:[NSURL URLWithString:self.updateUrl]];
    }
}

- (void)setShareSDK{
    [ShareSDK registerApp:@"1b73a6eca08f0" activePlatforms:@[@(SSDKPlatformTypeWechat), @(SSDKPlatformTypeQQ),@(SSDKPlatformTypeSinaWeibo)] onImport:^(SSDKPlatformType platformType) {
        switch (platformType)
        {
            case SSDKPlatformTypeWechat:
                [ShareSDKConnector connectWeChat:[WXApi class]];
                break;
            case SSDKPlatformTypeQQ:
                [ShareSDKConnector connectQQ:[QQApiInterface class] tencentOAuthClass:[TencentOAuth class]];
                break;
            case SSDKPlatformTypeSinaWeibo:
                [ShareSDKConnector connectWeibo:[WeiboSDK class]];
                break;
            default:
                break;
        }
    } onConfiguration:^(SSDKPlatformType platformType, NSMutableDictionary *appInfo) {
        switch (platformType)
        {
            case SSDKPlatformTypeSinaWeibo:
                //设置新浪微博应用信息,其中authType设置为使用SSO＋Web形式授权
                [appInfo SSDKSetupSinaWeiboByAppKey:@"318073556"
                                          appSecret:@"9b6700136fca9958039dc383ddfd7c70"
                                        redirectUri:@"http://www.douwong.com"
                                           authType:SSDKAuthTypeBoth];
                break;
            case SSDKPlatformTypeWechat:
                [appInfo SSDKSetupWeChatByAppId:@"wx4d18a7e6077fa31f"
                                      appSecret:@"461f504d9cb63b0d8062735c71a6eef7"];
                break;
            case SSDKPlatformTypeQQ:
                [appInfo SSDKSetupQQByAppId:@"1105514407"
                                     appKey:@"loShLZQgV9U3wVQy"
                                   authType:SSDKAuthTypeBoth];
                break;

            default:
                break;
        }
    }];
}


- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.

}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
    
    return  [WXApi handleOpenURL:url delegate:[WXApiManager sharedManager]];
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString *,id> *)options{
        if ([url.host isEqualToString:@"safepay"]) {
           //跳转支付宝钱包进行支付，处理支付结果
            [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
                NSString *resultStatus = [resultDic objectForKey:@"resultStatus"];
                NSString *result = [resultDic objectForKey:@"result"];
    
                if ([resultStatus isEqualToString:@"9000"]) {
                    if ([result rangeOfString:@"Success"].location!=NSNotFound) {
                       // 此处本来需调用后台接口 确认支付是否成功
                       [[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHARGE_SUCCESS object:nil];
                    }
                }
                NSLog(@"result = %@",resultDic);
            }];
        }
    //
        // 微信支付
        if ([url.host isEqualToString:@"pay"]) {
            return [WXApi handleOpenURL:url delegate:[WXApiManager sharedManager]];
    
        }
    [self finishPayWithUrl:url];
    return YES;
}

/**
 9000	订单支付成功
 8000	正在处理中，支付结果未知（有可能已经支付成功），请查询商户订单列表中订单的支付状态
 4000	订单支付失败
 5000	重复请求
 6001	用户中途取消
 6002	网络连接出错
 6004	支付结果未知（有可能已经支付成功），请查询商户订单列表中订单的支付状态
 其它	其它支付错误
 */
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation NS_DEPRECATED_IOS(4_2, 9_0, "Please use application:openURL:options:") __TVOS_PROHIBITED{
    [self finishPayWithUrl:url];
    return YES;
}

- (void)finishPayWithUrl:(NSURL *)url{
    
    // 支付宝支付
    if ([url.host isEqualToString:@"safepay"]) {
        //跳转支付宝钱包进行支付，处理支付结果
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            NSString *resultStatus = [resultDic objectForKey:@"resultStatus"];
            NSString *result = [resultDic objectForKey:@"result"];
            
            if ([resultStatus isEqualToString:@"9000"]) {
                if ([result rangeOfString:@"success=\"true\""].location!=NSNotFound) {
                    // 此处本来需调用后台接口 确认支付是否成功
                    [[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHARGE_SUCCESS object:nil];
                }
            }else if ([resultStatus isEqualToString:@"6001"]){
                [[NSNotificationCenter defaultCenter] postNotificationName:kNOTIFICATION_CHARGE_CANCEL_PAY object:@"alipay"];
                
            }else{
                UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@"提示" message:@"支付失败" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
                [alertView show];
            }
            NSLog(@"result = %@",resultDic);
        }];
    }
    // 微信支付
    if ([url.host isEqualToString:@"pay"]) {
        [WXApi handleOpenURL:url delegate:[WXApiManager sharedManager]];
    }
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

- (void)dealloc{

}

@end
